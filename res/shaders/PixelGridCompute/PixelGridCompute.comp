#version 450


bool bitsetHas(uint bitset, uint bits)
{
    return (bitset & bits) == bits;
}

struct Pixel {
    uint PixelID8_Flags8_Density8_Spread8;
};



layout(std430, set = 1, binding = 0) readonly buffer c_s_si_SimulationData {
    float deltaTime;
    uint timer;
    float rng;
    Pixel solidPixel;
} simulationData;

layout(std430, set = 1, binding = 1) buffer na_s_PixelSSBOIn {
    Pixel readOnlyPixels[1000000];
};

layout(std430, set = 1, binding = 2) buffer s_Pixels {
    Pixel pixels[1000000];
};

const uint width = 1000;
const uint height = 1000;

const uint Solid = 1u << 0u;
const uint Gravity = 1u << 1u;

// Pixel with {PixelID: 255, Flags: [Solid], Density: minValue, Spread: 0}
//const Pixel solidPixel = { 0x000001FF };
//const Pixel solidPixel = { 0xFF01F000 };

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint index = gl_GlobalInvocationID.x;

    if (index >= width * height) {
        return;
    }

    uint y = index / width;
    uint x = index % height;

    Pixel solidPixel = simulationData.solidPixel;
    Pixel currentPixel = readOnlyPixels[index];
    // Extracting Flags (next 8 bits)
    uint currentPixelFlags = (currentPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;

    // Extracting Density (next 8 bits)
    uint currentPixelDensity = int((currentPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu);

    if (bitsetHas(currentPixelFlags, Gravity))
    {
        bool atTheBottom = y == 0;
        bool atTheTop    = y == height - 1;

        uint topIndex    = (y + 1) * width + x;
        uint bottomIndex = (y - 1) * width + x;

        // Middle
        Pixel topPixel = solidPixel;
        if (!atTheTop) { topPixel = readOnlyPixels[topIndex]; }

        Pixel bottomPixel = solidPixel;
        if (!atTheBottom) { bottomPixel = readOnlyPixels[bottomIndex]; }

        Pixel rightPixel       = solidPixel;
        Pixel topRightPixel    = solidPixel;
        Pixel bottomRightPixel = solidPixel;

        Pixel leftPixel       = solidPixel;
        Pixel topLeftPixel    = solidPixel;
        Pixel bottomLeftPixel = solidPixel;

        // Right
        if (x + 1 < width)
        {
            rightPixel = readOnlyPixels[index + 1];

            if (!atTheTop) { topRightPixel = readOnlyPixels[topIndex + 1]; }

            if (!atTheBottom) { bottomRightPixel = readOnlyPixels[bottomIndex + 1]; }
        }

        // Left
        if (x - 1 > 0)
        {
            leftPixel = readOnlyPixels[index - 1];

            if (!atTheTop) { topLeftPixel = readOnlyPixels[topIndex - 1]; }

            if (!atTheBottom) { bottomLeftPixel = readOnlyPixels[bottomIndex - 1]; }
        }

        uint topPixelFlags = (topPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
        uint topPixelDensity = (topPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;

        uint bottomPixelFlags = (bottomPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
        uint bottomPixelDensity = (bottomPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;

        if (!bitsetHas(topPixelFlags, Solid) && currentPixelDensity < topPixelDensity)
        {
            pixels[index] = topPixel;
            return;
        }

        if (!bitsetHas(bottomPixelFlags, Solid) && currentPixelDensity > bottomPixelDensity)
        {
            pixels[index] = bottomPixel;
            return;
        }

        if (simulationData.timer % 2 == 0)
        {
            uint leftPixelFlags = (leftPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
            uint leftPixelDensity = (leftPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;

            uint topLeftPixelFlags = (topLeftPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
            uint topLeftPixelDensity = (topLeftPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;
            if (!bitsetHas(topLeftPixelFlags, Solid) && !bitsetHas(leftPixelFlags, Solid) && leftPixelDensity >= topLeftPixelDensity && currentPixelDensity < topLeftPixelDensity)
            {
                pixels[index] = topLeftPixel;
                return;
            }

            uint bottomRightPixelFlags = (bottomRightPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
            uint bottomRightPixelDensity = (bottomRightPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;
            if (!bitsetHas(bottomRightPixelFlags, Solid) && currentPixelDensity > bottomRightPixelDensity)
            {
                pixels[index] = bottomRightPixel;
                return;
            }
        }
        else
        {
            uint rightPixelFlags = (rightPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
            uint rightPixelDensity = (rightPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;

            uint topRightPixelFlags = (topRightPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
            uint topRightPixelDensity = (topRightPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;
            if (!bitsetHas(topRightPixelFlags, Solid) && !bitsetHas(rightPixelFlags, Solid) && rightPixelDensity >= topRightPixelDensity && currentPixelDensity < topRightPixelDensity)
            {
                pixels[index] = topRightPixel;
                return;
            }

            uint bottomLeftPixelFlags = (bottomLeftPixel.PixelID8_Flags8_Density8_Spread8 >> 8u) & 0xFFu;
            uint bottomLeftPixelDensity = (bottomLeftPixel.PixelID8_Flags8_Density8_Spread8 >> 16u) & 0xFFu;
            if (!bitsetHas(bottomLeftPixelFlags, Solid) && currentPixelDensity > bottomLeftPixelDensity)
            {
                pixels[index] = bottomLeftPixel;
                return;
            }
        }
    }

    pixels[index].PixelID8_Flags8_Density8_Spread8 = currentPixel.PixelID8_Flags8_Density8_Spread8;
}