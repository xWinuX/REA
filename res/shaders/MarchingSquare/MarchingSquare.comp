#version 450

#include "../PixelGridComputeGlobals.glsl"

layout(push_constant) uniform PushConstant {
    uint ReadIndex;
};

layout(std430, set = 1, binding = 4) writeonly buffer s_c_si_MarchingSquares {
    uint numSegments;
    vec2 segments[100000];
};

const uint caseLookup[16] = {
    0, // 0000 0
    3, // 0001 1
    5, // 0010 2
    2, // 0011 3
    4, // 0100 4
    7, // 0101 5
    1, // 0110 6
    6, // 0111 7
    6, // 1000 8
    1, // 1001 9
    7, // 1010 10
    4, // 1011 11
    2, // 1100 12
    5, // 1101 13
    3, // 1110 14
    0, // 1111 15
};


const int edgeLookup[8][4] = {
    { -1, -1, -1, -1 }, // Nothing 0
    { 0, 2, -1, -1 },   // Column 1
    { 1, 3, -1, -1 },   // Row 2
    { 0, 3, -1, -1 },   // Bottom Left Corner 3
    { 1, 2, -1, -1 },   // Top Right Corner 4
    { 0, 1, -1, -1 },   // Bottom Right Corner 5
    { 2, 3, -1, -1 },   // Top Left Corner 6
    { -1, -1, -1, -1 }, // AMBG
};



const vec2 edgeOffsets[4] = vec2[4](
    vec2(0.5f, 0.0f), // 0 -> midpoint of edge between 0 and 1
    vec2(1.0f, 0.5f), // 1 -> midpoint of edge between 1 and 2
    vec2(0.5f, 1.0f), // 2 -> midpoint of edge between 2 and 3
    vec2(0.0f, 0.5f)  // 3 -> midpoint of edge between 3 and 0
);


const uint connectionLookup[8] = {
    0, // Nothing
    0, // Column
    1, // Row
    1, // Bottom Left Corner
    1, // Top Right Corner
    1, // Bottom Right Corner
    0, // Top Left Corner
    0, // AMBG
};



/*
const uint connectionLookup[16] = {
    0,  // 0000 0
    1,   // 0001 1
    0,  // 0010 2
    1,   // 0011 3
    1,   // 0100 4
    0,   // 0101 5
    0,  // 0110 6
    1,   // 0111 7
    2,  // 1000 8
    0,  // 1001 9
    0,  // 1010 10
    1,   // 1011 11
    1,   // 1100 12
    1,  // 1101 13
    1,   // 1110 14
    0,  // 1111 15
};*/




/*

    Col:
    { 0, 2, -1, -1 },   // 0110 6
    { 0, 2, -1, -1 },   // 1001 9

    Row:
    { 1, 3, -1, -1 },   // 1100 12
    { 1, 3, -1, -1 },   // 0011 3


    Left To Right Diag:
    { 0, 3, -1, -1 },   // 1110 14
    { 0, 3, -1, -1 },   // 0001 1
    { 1, 2, -1, -1 },   // 0100 4
    { 1, 2, -1, -1 },   // 1011 11

    Right to Left Diag:
    { 0, 1, -1, -1 },   // 0010 2
    { 2, 3, -1, -1 },   // 0111 7
    { 2, 3, -1, -1 },   // 1000 8
    { 0, 1, -1, -1 },   // 1101 13





    { -1, -1, -1, -1 }, // 0000 0
    { 0, 1, 2, 3 },     // 0101 5
    { 0, 3, 1, 2 },     // 1010 10
    { -1, -1, -1, -1 }, // 1111 15






const int lookupTable[16][4] = {
    {-1, -1, -1, -1},   // Nothing
    {1, 3, -1, -1},     // Horizontal
    {0, 2, -1, -1},     // Vertical
};*/

/*

    {1, 2, -1, -1},   // 0100 TopRD 4
    {1, 2, -1, -1},   // 1011 TopRD 11
    {0, 3, -1, -1},   // 0001  BotLD 1
    {0, 3, -1, -1},   // 1110  BotLD 14





    {2, 3, -1, -1},   // 0111 TopLD 7
    {2, 3, -1, -1},   // 1000 TopLD 8
    {0, 1, -1, -1},   // 0010 BotRD 2
    {0, 1, -1, -1},   // 1101 BotRD 13


    {0, 2, -1, -1},   // 1001 Y
    {0, 2, -1, -1},   // 0110 Y





    {1, 3, -1, -1},   // 0011 X
    {1, 3, -1, -1},   // 1100 X




    {0, 1, 2, 3},     // 0101 AMBG
    {0, 3, 1, 2},     // 1010 AMBG
*/


const uint Vertical = 0;
const uint Horizontal = 1;
const uint DiagonalLeftToRight = 2;
const uint DiagonalRightToLeft = 3;

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint width = simulationData.width;
    uint height = simulationData.height;

    if (gl_GlobalInvocationID.x >= ((width + height)*3)-2) {
        return;
    }

    uint direction = Vertical;
    ivec2 stepDirection = ivec2(0, 1);// Which direction will the cells step to cover one column/row/diagonal
    uvec2 position = uvec2(gl_GlobalInvocationID.x, 0);// Starting position of the iteration
    uint numIterations = height;
    bool swapEndAndStart = false;

    // Vertical Iteration
    if (gl_GlobalInvocationID.x < width) {
        direction = Vertical;
        stepDirection = ivec2(0, 1);
        position = uvec2(gl_GlobalInvocationID.x, 0);
        numIterations = height;

        // Horizontal Iteration
    } else if (gl_GlobalInvocationID.x < width + height) {
        direction = Horizontal;
        stepDirection = ivec2(1, 0);
        position = uvec2(0, gl_GlobalInvocationID.x - width);
        numIterations = width;
        swapEndAndStart = true;
        // Diagonal Left to Right
    } else if (gl_GlobalInvocationID.x < width + height + (width + height - 1)) {
        direction = DiagonalLeftToRight;
        stepDirection = ivec2(1, -1);
        uint index = gl_GlobalInvocationID.x - (width + height);
        if (index < height) {
            position = uvec2(0, index);
            numIterations = min(index + 1, min(width, height));
        } else {
            position = uvec2(index - height + 1, height - 1);
            numIterations = min(width - (index - height + 1), height);
        }
        swapEndAndStart = true;

        // Diagonal Right to Left
    } else {
        direction = DiagonalRightToLeft;
        stepDirection = ivec2(-1, -1);
        uint index = gl_GlobalInvocationID.x - (width + height + (width + height - 1));
        if (index < height) {
            position = uvec2(width - 1, index);
            numIterations = min(index + 1, min(width, height));
        } else {
            position = uvec2(width - (index - height + 1), height - 1);
            numIterations = min(width - (index - height + 1), height);
        }
    }

    vec2 startPosition = vec2(0.0f);
    vec2 previousPosition = vec2(1.0f);
    uint previousCaseIndex = 16;

    for (int stepIndex = 0; stepIndex < numIterations; stepIndex++)
    {
        uint x = uint(position.x + stepDirection.x * stepIndex);
        uint y = uint(position.y + stepDirection.y * stepIndex);

        vec2 samplePosition = vec2(x, y);

        uint middleYCalc = y * width;

        uint bottomY = (y == 0) ? height - 1 : y - 1;
        uint rightX = (x + 1) % width;

        uint bottomYCalc = bottomY * width;

        uint topLeftIndex = middleYCalc + x;
        uint topRightIndex = middleYCalc + rightX;
        uint bottomLeftIndex = bottomYCalc + x;
        uint bottomRightIndex = bottomYCalc + rightX;

        Pixel topLeftPixel = pixels[topLeftIndex + ReadIndex];
        Pixel topRightPixel = pixels[topRightIndex + ReadIndex];
        Pixel bottomLeftPixel = pixels[bottomLeftIndex + ReadIndex];
        Pixel bottomRightPixel = pixels[bottomRightIndex + ReadIndex];

        PixelData topLeftPixelData = simulationData.pixelLookup[topLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
        PixelData topRightPixelData = simulationData.pixelLookup[topRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
        PixelData bottomLeftPixelData = simulationData.pixelLookup[bottomLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
        PixelData bottomRightPixelData = simulationData.pixelLookup[bottomRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];

        // Compute the case index
        uint caseNumber = (uint(bitsetHas(topLeftPixelData.Flags, Solid)) << 3u) |
        (uint(bitsetHas(topRightPixelData.Flags, Solid)) << 2u) |
        (uint(bitsetHas(bottomRightPixelData.Flags, Solid)) << 1u) |
        uint(bitsetHas(bottomLeftPixelData.Flags, Solid));

        uint caseIndex = caseLookup[caseNumber];

        bool forceCaseSwitch = false;
        if (direction != Vertical && direction != Horizontal)
        {
            if ((caseIndex == 3 && previousCaseIndex == 3) ||
                (caseIndex == 4 && previousCaseIndex == 4) ||
                (caseIndex == 5 && previousCaseIndex == 5) ||
                (caseIndex == 6 && previousCaseIndex == 6))
            {
                forceCaseSwitch = true;
            }


            if ((caseIndex == 3 && previousCaseIndex == 4) ||
                (caseIndex == 4 && previousCaseIndex == 3) ||
                (caseIndex == 5 && previousCaseIndex == 6) ||
                (caseIndex == 6 && previousCaseIndex == 5))
            {
                previousCaseIndex = caseIndex;
            }
        }

        if (caseIndex != previousCaseIndex || forceCaseSwitch)
        {
            bool isInvalidCase =    caseIndex != 0 && caseIndex != 7 && ((direction == Vertical && caseIndex != 1) ||
            (direction == Horizontal && caseIndex != 2) ||
            (direction == DiagonalLeftToRight && caseIndex != 3 && caseIndex != 4) ||
            (direction == DiagonalRightToLeft && caseIndex != 5 && caseIndex != 6));

            if (previousCaseIndex == 16)
            {
                if (!isInvalidCase)
                {
                    previousCaseIndex = caseIndex;
                    startPosition = samplePosition;
                }
            }
            else
            {
                const int[4] edges = edgeLookup[previousCaseIndex];

                for (int i = 0; i < 4; i += 2)
                {
                    if (edges[i] != -1 && edges[i+1] != -1)
                    {
                        vec2 start;
                        vec2 end;
                        uint connectionCase = connectionLookup[previousCaseIndex];
                        if (connectionCase == 1)
                        {
                            start = previousPosition + edgeOffsets[edges[i]] + vec2(0.5, -0.5);
                            end = startPosition + edgeOffsets[edges[i+1]] + vec2(0.5, -0.5);
                        }
                        else if (connectionCase == 0)
                        {
                            start = startPosition + edgeOffsets[edges[i]] + vec2(0.5, -0.5);
                            end = previousPosition + edgeOffsets[edges[i+1]] + vec2(0.5, -0.5);
                        }
                        else
                        {
                            start = previousPosition + edgeOffsets[edges[i]];
                            end = startPosition + edgeOffsets[edges[i+1]];
                        }

                        uint idx = atomicAdd(numSegments, 1);
                        segments[idx * 2] = start;
                        segments[(idx * 2) + 1] = end;
                    }
                }

                if (isInvalidCase)
                {
                    previousCaseIndex = 16;
                }
                else
                {
                    previousCaseIndex = caseIndex;
                    startPosition = samplePosition;
                }
            }
        }

        previousPosition = samplePosition;
    }
}