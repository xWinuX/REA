#version 450

#include "../PixelGridComputeGlobals.glsl"
#include "../SharedBuffers.glsl"

SSBO_ViewportPixels(1, 5)

#define SET_REGENERATE() \
uint rigidBodyID = getRigidBodyID(middleCenterPixel.RigidBodyID12_RigidBodyIndex20); \
if (rigidBodyID != 0) {  \
    rigidBodies[rigidBodyID].NeedsRecalculation = true; \
}  \
regenerateChunks[middleCenterChunkMapping] = true;  \

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    BoundaryCheck();

    uint x = gl_GlobalInvocationID.x % NUM_ELEMENTS_X;
    uint y = gl_GlobalInvocationID.x / NUM_ELEMENTS_X;

    uint topY = (y + 1) % NUM_ELEMENTS_Y;
    uint bottomY = (y == 0) ? NUM_ELEMENTS_Y - 1 : y - 1;

    uint rightX = (x + 1) % NUM_ELEMENTS_X;
    uint leftX = (x == 0) ? NUM_ELEMENTS_X - 1 : x - 1;

    uint topYCalc = topY * NUM_ELEMENTS_X;
    uint middleYCalc = y * NUM_ELEMENTS_X;
    uint bottomYCalc = bottomY * NUM_ELEMENTS_X;

    SetupPixelVarsByPosition(topLeft, leftX, topY);
    SetupPixelVarsByPosition(topCenter, x, topY);
    SetupPixelVarsByPosition(topRight, rightX, topY);

    SetupPixelVarsByPosition(middleLeft, leftX, y);
    SetupPixelVarsByPosition(middleCenter, x, y);
    SetupPixelVarsByPosition(middleRight, rightX, y);

    SetupPixelVarsByPosition(bottomLeft, leftX, bottomY);
    SetupPixelVarsByPosition(bottomCenter, x, bottomY);
    SetupPixelVarsByPosition(bottomRight, rightX, bottomY);

    uint pixelID = middleCenterPixel.PixelID16_Charge8_Flags8 & 0xFFFFu;

    PixelData topLeftPixelData = simulationData.pixelLookup[topLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData topCenterPixelData = simulationData.pixelLookup[topCenterPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData topRightPixelData = simulationData.pixelLookup[topRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];

    PixelData middleLeftPixelData = simulationData.pixelLookup[middleLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData middleCenterPixelData = simulationData.pixelLookup[pixelID];
    PixelData middleRightPixelData = simulationData.pixelLookup[middleRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];

    PixelData bottomLeftPixelData = simulationData.pixelLookup[bottomLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData bottomCenterPixelData = simulationData.pixelLookup[bottomCenterPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData bottomRightPixelData = simulationData.pixelLookup[bottomRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];





    uint flags = getFlags(middleCenterPixel.PixelID16_Charge8_Flags8);

/* if (charge > 0 && bitsetHas(middleCenterPixelData.Flags, ElectricityReceiver))
     {
         charge--;
     }*/


    // Charge
    uint charge = getCharge(middleCenterPixel.PixelID16_Charge8_Flags8);
    if (bitsetHas(middleCenterPixelData.Flags, Conductive) && !bitsetHas(middleCenterPixelData.Flags, ElectricityEmitter))
    {
        uint maxCharge0 = max(getCharge(middleRightPixel.PixelID16_Charge8_Flags8), getCharge(topCenterPixel.PixelID16_Charge8_Flags8));
        uint maxCharge1 = max(getCharge(middleLeftPixel.PixelID16_Charge8_Flags8), getCharge(bottomCenterPixel.PixelID16_Charge8_Flags8));

        uint maxCharge = max(maxCharge0, maxCharge1);

        charge = uint(clamp(int(maxCharge) - 1, 0, 255));

    }

    // Temperature
    float temperatureResistance = middleCenterPixelData.TemperatureResistance;

    float baseTemperature = middleCenterPixel.Temperature;
    float temperature = baseTemperature;

    temperature += topLeftPixel.Temperature;
    temperature += topCenterPixel.Temperature;
    temperature += topRightPixel.Temperature;
    temperature += middleLeftPixel.Temperature;
    temperature += middleRightPixel.Temperature;
    temperature += bottomLeftPixel.Temperature;
    temperature += bottomCenterPixel.Temperature;
    temperature += bottomRightPixel.Temperature;

    temperature /= 9.0f;

    temperature = mix(baseTemperature, temperature, temperatureResistance);
    if (temperature >= middleCenterPixelData.HighTemperatureLimit || temperature < middleCenterPixelData.LowerTemperatureLimit) {
        if (temperature >= middleCenterPixelData.HighTemperatureLimit) {
            pixelID = middleCenterPixelData.HighTemperatureLimitPixelID;
        } else {
            pixelID = middleCenterPixelData.LowerTemperatureLimitPixelID;
        }

        PixelData newPixelData = simulationData.pixelLookup[pixelID];
        flags &= newPixelData.FlagsCarryover;
        temperature = mix(temperature, newPixelData.BaseTemperature, newPixelData.TemperatureConversion);

        middleCenterPixelData = newPixelData;

        SET_REGENERATE()
    }

    // Acidity
    if (bitsetHas(flags, Solid))
    {
        float acidity = 0.0f;
        acidity += topLeftPixelData.Acidity;
        acidity += topCenterPixelData.Acidity;
        acidity += topRightPixelData.Acidity;
        acidity += middleLeftPixelData.Acidity;
        acidity += middleRightPixelData.Acidity;
        acidity += bottomLeftPixelData.Acidity;
        acidity += bottomCenterPixelData.Acidity;
        acidity += bottomRightPixelData.Acidity;

        acidity /= 8.0f;

        if (acidity > middleCenterPixelData.AcidityResistance)
        {
            pixelID = 0;
            PixelData newPixelData = simulationData.pixelLookup[pixelID];
            flags &= newPixelData.FlagsCarryover;

            SET_REGENERATE()
        }
    }

    if (middleCenterPixelData.Acidity > 0.0f)
    {
        float acidity = 0.0f;
        acidity += uint(topLeftPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(topLeftPixel.PixelID16_Charge8_Flags8), Solid));
        acidity += uint(topCenterPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(topCenterPixel.PixelID16_Charge8_Flags8), Solid));
        acidity += uint(topRightPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(topRightPixel.PixelID16_Charge8_Flags8), Solid));
        acidity += uint(middleLeftPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(middleLeftPixel.PixelID16_Charge8_Flags8), Solid));
        acidity += uint(middleRightPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(middleRightPixel.PixelID16_Charge8_Flags8), Solid));
        acidity += uint(bottomLeftPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(bottomLeftPixel.PixelID16_Charge8_Flags8), Solid));
        acidity += uint(bottomCenterPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(bottomCenterPixel.PixelID16_Charge8_Flags8), Solid));
        acidity += uint(bottomRightPixelData.AcidityResistance < middleCenterPixelData.Acidity) * uint(bitsetHas(getFlags(bottomRightPixel.PixelID16_Charge8_Flags8), Solid));

        if (acidity > 0)
        {
            pixelID = 0;
            PixelData newPixelData = simulationData.pixelLookup[pixelID];
            flags &= newPixelData.FlagsCarryover;

            SET_REGENERATE()
        }
    }

    // Clear Info
    middleCenterPixel.PixelID16_Charge8_Flags8 &= 0x00000000u;

    // Assign new info
    middleCenterPixel.PixelID16_Charge8_Flags8 |= pixelID;
    middleCenterPixel.PixelID16_Charge8_Flags8 |= charge << 16u;
    middleCenterPixel.PixelID16_Charge8_Flags8 |= flags << 24u;
    middleCenterPixel.Temperature = temperature;

    // Write pixels to output and rendering buffer

    GetWritePixel(middleCenter) = middleCenterPixel;

    uvec2 position = GetPixelPosition(middleCenter);
    viewportPixels[PositionToIndex(position)] = middleCenterPixel;

    //copyPixels[middleCenterIndexWriteRead] = middleCenterPixel;
}
