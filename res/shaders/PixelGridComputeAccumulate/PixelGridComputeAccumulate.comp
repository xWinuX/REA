#version 450

#include "../PixelGridComputeGlobals.glsl"

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint width = simulationData.width;
    uint height = simulationData.height;

    if (gl_GlobalInvocationID.x >= width * height) {
        return;
    }

    uint x = gl_GlobalInvocationID.x % width;
    uint y = gl_GlobalInvocationID.x / width;

    uint topY = (y + 1) % height;
    uint bottomY = (y == 0) ? height - 1 : y - 1;

    uint rightX = (x + 1) % width;
    uint leftX = (x == 0) ? width - 1 : x - 1;

    // Calculate wrapped indices
    uint topYCalc = topY * width;
    uint middleYCalc = y * width;
    uint bottomYCalc = bottomY * width;

    uint topLeftIndex = topYCalc + leftX;
    uint topCenterIndex = topYCalc + x;
    uint topRightIndex = topYCalc + rightX;

    uint middleLeftIndex = middleYCalc + leftX;
    uint middleCenterIndex = gl_GlobalInvocationID.x;
    uint middleRightIndex = middleYCalc + rightX;

    uint bottomLeftIndex = bottomYCalc + leftX;
    uint bottomCenterIndex = bottomYCalc + x;
    uint bottomRightIndex = bottomYCalc + rightX;

    // Read pixels
    Pixel topLeftPixel = readOnlyPixels[topLeftIndex];
    Pixel topCenterPixel = readOnlyPixels[topCenterIndex];
    Pixel topRightPixel = readOnlyPixels[topRightIndex];

    Pixel middleLeftPixel = readOnlyPixels[middleLeftIndex];
    Pixel middleCenterPixel = readOnlyPixels[middleCenterIndex];
    Pixel middleRightPixel = readOnlyPixels[middleRightIndex];

    Pixel bottomLeftPixel = readOnlyPixels[bottomLeftIndex];
    Pixel bottomCenterPixel = readOnlyPixels[bottomCenterIndex];
    Pixel bottomRightPixel = readOnlyPixels[bottomRightIndex];

    uint pixelID = middleCenterPixel.PixelID16_Temperature8_Pressure8 & 0xFFFFu;
    PixelData middleCenterPixelData = simulationData.pixelLookup[pixelID];
    float temperatureResistance = middleCenterPixelData.TemperatureResistance;

    float baseTemperature = middleCenterPixel.Temperature;
    float temperature = baseTemperature;

    temperature += topLeftPixel.Temperature;
    temperature += topCenterPixel.Temperature;
    temperature += topRightPixel.Temperature;
    temperature += middleLeftPixel.Temperature;
    temperature += middleRightPixel.Temperature;
    temperature += bottomLeftPixel.Temperature;
    temperature += bottomCenterPixel.Temperature;
    temperature += bottomRightPixel.Temperature;

    temperature /= 9.0f;

    temperature = mix(baseTemperature, temperature, temperatureResistance);

    if (temperature >= middleCenterPixelData.HighTemperatureLimit) {
        pixelID = middleCenterPixelData.HighTemperatureLimitPixelID;
    } else if (temperature < middleCenterPixelData.LowerTemperatureLimit) {
        pixelID =  middleCenterPixelData.LowerTemperatureLimitPixelID;
    }

    middleCenterPixel.PixelID16_Temperature8_Pressure8 &= 0xFF000000u;
    middleCenterPixel.PixelID16_Temperature8_Pressure8 |= pixelID;
    middleCenterPixel.Temperature = temperature;

    // Write pixels
    pixels[middleCenterIndex] = middleCenterPixel;
}
