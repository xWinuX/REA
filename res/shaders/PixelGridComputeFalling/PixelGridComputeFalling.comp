#version 450

#include "../PixelGridComputeGlobals.glsl"

// Pixel with {PixelID: 255, Flags: [Solid], Density: minValue, Spread: 0}
//const Pixel solidPixel = { 0x000001FF };
//const Pixel solidPixel = { 0xFF01F000 };

layout(push_constant) uniform PushConstant {
    uint readIndex;
    uint writeIndex;
    uint flowIteration;
    uvec2 margolusOffset;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint width = simulationData.width;
    uint height = simulationData.height;

    if (gl_GlobalInvocationID.x >= (width * height)) {
        return;
    }

    uint cellStep = gl_GlobalInvocationID.x * 2;
    uint margolusX = ((cellStep + margolusOffset.x) % width);
    uint margolusY = (((cellStep / width) * 2) + 1) - margolusOffset.y;

    uint topLeftIndex = (margolusY * width) + margolusX;

    uint x = margolusX;
    uint y = margolusY;

    uint topRightX = (x + 1) % width;
    uint topRightY = y;

    uint bottomLeftX = x;
    uint bottomLeftY = (y == 0) ? height - 1 : y - 1;

    uint bottomRightX = topRightX;
    uint bottomRightY = bottomLeftY;

    // Calculate wrapped indices
    uint topRightIndex = (topRightY * width) + topRightX;
    uint bottomLeftIndex = (bottomLeftY * width) + bottomLeftX;
    uint bottomRightIndex = (bottomRightY * width) + bottomRightX;

    // Read pixels
    Pixel topLeftPixel = pixels[topLeftIndex + readIndex];
    Pixel bottomLeftPixel = pixels[bottomLeftIndex + readIndex];
    Pixel topRightPixel = pixels[topRightIndex + readIndex];
    Pixel bottomRightPixel = pixels[bottomRightIndex + readIndex];

    PixelData topLeftPixelData = simulationData.pixelLookup[topLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData bottomLeftPixelData = simulationData.pixelLookup[bottomLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData topRightPixelData = simulationData.pixelLookup[topRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData bottomRightPixelData = simulationData.pixelLookup[bottomRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];

    // Write pixels
    pixels[topLeftIndex + writeIndex] = topLeftPixel;
    pixels[bottomLeftIndex + writeIndex] = bottomLeftPixel;
    pixels[topRightIndex + writeIndex] = topRightPixel;
    pixels[bottomRightIndex + writeIndex] = bottomRightPixel;

    float topLeftTemperature = topLeftPixel.Temperature;
    float topRightTemperature = topRightPixel.Temperature;
    float bottomLeftTemperature = bottomLeftPixel.Temperature;
    float bottomRightTemperature = bottomRightPixel.Temperature;

    bool topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bool bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    bool topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bool bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftGravity = bitsetHas(topLeftPixelData.Flags, Gravity);
    bool topRightGravity = bitsetHas(topRightPixelData.Flags, Gravity);
    bool bottomLeftGravity = bitsetHas(bottomLeftPixelData.Flags, Gravity);
    bool bottomRightGravity = bitsetHas(bottomRightPixelData.Flags, Gravity);

    bool topLeftCanFlow = topLeftPixelData.Spread > 0;
    bool topRightCanFlow = topRightPixelData.Spread > 0;
    bool bottomLeftCanFlow = bottomLeftPixelData.Spread > 0;
    bool bottomRightCanFlow = bottomRightPixelData.Spread > 0;

    float step = 0.00002f;

    float topLeftDensity = topLeftPixelData.Density - (step * topLeftTemperature * float(topLeftCanFlow));
    float topRightDensity = topRightPixelData.Density - (step * topRightTemperature * float(topRightCanFlow));
    float bottomLeftDensity = bottomLeftPixelData.Density - (step * bottomLeftTemperature * float(bottomLeftCanFlow));
    float bottomRightDensity = bottomRightPixelData.Density - (step * bottomRightTemperature * float(bottomRightCanFlow));

    if (flowIteration == 0)
    {
        bool leftRowSwapped = false;
        bool rightRowSwapped = false;

        if (topLeftGravity && bottomLeftGravity && (topLeftCanFlow || !bottomLeftPixelSolid))
        {
            if (topLeftDensity > bottomLeftDensity)
            {
                pixels[topLeftIndex + writeIndex] = bottomLeftPixel;
                pixels[bottomLeftIndex + writeIndex] = topLeftPixel;

                Pixel tmpPixel = topLeftPixel;
                PixelData tmpPixelData = topLeftPixelData;
                float tmpPixelDensity = topLeftDensity;
                bool tmpGravity = topLeftGravity;

                topLeftPixel = bottomLeftPixel;
                topLeftPixelData = bottomLeftPixelData;
                topLeftDensity = bottomLeftDensity;
                topLeftGravity = bottomLeftGravity;

                bottomLeftPixel = tmpPixel;
                bottomLeftPixelData = tmpPixelData;
                bottomLeftDensity = tmpPixelDensity;
                bottomLeftGravity = tmpGravity;

                leftRowSwapped = true;
            }
        }

        if (topRightGravity && bottomRightGravity && (topRightCanFlow || !bottomRightPixelSolid))
        {
            if (topRightDensity > bottomRightDensity)
            {
                pixels[topRightIndex + writeIndex] = bottomRightPixel;
                pixels[bottomRightIndex + writeIndex] = topRightPixel;

                Pixel tmpPixel = topRightPixel;
                PixelData tmpPixelData = topRightPixelData;
                float tmpPixelDensity = topRightDensity;

                topRightPixel = bottomRightPixel;
                topRightPixelData = bottomRightPixelData;
                topRightDensity = bottomRightDensity;

                bottomRightPixel = tmpPixel;
                bottomRightPixelData = tmpPixelData;
                bottomRightDensity = tmpPixelDensity;

                rightRowSwapped = true;
            }
        }

        if ((topLeftPixelSolid && bottomRightPixelSolid) || (topRightPixelSolid && bottomLeftPixelSolid)) { return; }

        if (!leftRowSwapped && !rightRowSwapped)
        {
            if (topLeftGravity && bottomRightGravity && (topLeftCanFlow || !bottomRightPixelSolid) && topLeftDensity > bottomRightDensity)
            {
                pixels[topLeftIndex + writeIndex] = bottomRightPixel;
                pixels[bottomRightIndex + writeIndex] = topLeftPixel;

                Pixel tmpPixel = topLeftPixel;
                PixelData tmpPixelData = topLeftPixelData;
                float tmpPixelDensity = topLeftDensity;

                topLeftPixel = bottomRightPixel;
                topLeftPixelData = bottomRightPixelData;
                topLeftDensity = bottomRightDensity;

                bottomRightPixel = tmpPixel;
                bottomRightPixelData = tmpPixelData;
                bottomRightDensity = tmpPixelDensity;
            }
            else if (topRightGravity && bottomLeftGravity && (topRightCanFlow || !bottomLeftPixelSolid) &&  topRightDensity > bottomLeftDensity)
            {
                pixels[topRightIndex + writeIndex] = bottomLeftPixel;
                pixels[bottomLeftIndex + writeIndex] = topRightPixel;

                Pixel tmpPixel = topRightPixel;
                PixelData tmpPixelData = topRightPixelData;
                float tmpPixelDensity = topRightDensity;


                topRightPixel = bottomLeftPixel;
                topRightPixelData = bottomLeftPixelData;
                topRightDensity = bottomLeftDensity;

                bottomLeftPixel = tmpPixel;
                bottomLeftPixelData = tmpPixelData;
                bottomLeftDensity = tmpPixelDensity;
            }
        }
    }

    topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftCanSpread = topLeftPixelData.Spread > flowIteration;
    bool topRightCanSpread = topRightPixelData.Spread > flowIteration;
    bool bottomLeftCanSpread = bottomLeftPixelData.Spread > flowIteration;
    bool bottomRightCanSpread = bottomRightPixelData.Spread > flowIteration;

    if (!topLeftCanSpread && !topRightCanSpread && !bottomLeftCanSpread && !bottomRightCanSpread) { return; }

    //if (!topLeftPixelSolid && !topRightPixelSolid)
    //{
    if (
    (topLeftGravity && topRightGravity && (bottomLeftPixelSolid || bottomLeftDensity >= topLeftDensity) && (bottomRightPixelSolid || bottomRightDensity >= topRightDensity)) && (
    (simulationData.rng >= 0.5f && topLeftCanSpread && topLeftDensity > topRightDensity) ||
    (simulationData.rng < 0.5f && topRightCanSpread && topRightDensity > topLeftDensity)
    )
    )
    {
        pixels[topLeftIndex + writeIndex] = topRightPixel;
        pixels[topRightIndex + writeIndex] = topLeftPixel;

        bool tmpSolid = topLeftPixelSolid;
        float tmpDensity = topLeftDensity;

        topLeftPixelSolid = topRightPixelSolid;
        topLeftDensity = topRightDensity;

        topRightPixelSolid = tmpSolid;
        topRightDensity = tmpDensity;
    }
    //}

    //if (!bottomLeftPixelSolid && !bottomRightPixelSolid)
    //{
    if (
    (bottomLeftGravity && bottomRightGravity && (topLeftPixelSolid || topLeftDensity >= bottomLeftDensity) && (topRightPixelSolid || topRightDensity >= bottomRightDensity)) && (
    (simulationData.rng >= 0.5f && bottomLeftCanSpread && bottomLeftDensity > bottomRightDensity) ||
    (simulationData.rng < 0.5f && bottomRightCanSpread && bottomRightDensity > bottomLeftDensity)
    )
    )
    {
        pixels[bottomLeftIndex + writeIndex] = bottomRightPixel;
        pixels[bottomRightIndex + writeIndex] = bottomLeftPixel;
    }
    //}
}
