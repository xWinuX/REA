#version 450

#include "../PixelGridComputeGlobals.glsl"

// Pixel with {PixelID: 255, Flags: [Solid], Density: minValue, Spread: 0}
//const Pixel solidPixel = { 0x000001FF };
//const Pixel solidPixel = { 0xFF01F000 };

layout(push_constant) uniform PushConstant {
    uint flowIteration;
    uvec2 margolusOffset;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint width = simulationData.width;
    uint height = simulationData.height;

    if (gl_GlobalInvocationID.x >= (width * height)) {
        return;
    }

    uint cellStep = gl_GlobalInvocationID.x * 2;
    uint margolusX = ((cellStep + margolusOffset.x) % width);
    uint margolusY = (((cellStep / width) * 2) + 1) - margolusOffset.y;

    uint topLeftIndex = (margolusY * width) + margolusX;

    uint x = margolusX;
    uint y = margolusY;

    uint topRightX = (x + 1) % width;
    uint topRightY = y;

    uint bottomLeftX = x;
    uint bottomLeftY = (y == 0) ? height - 1 : y - 1;

    uint bottomRightX = topRightX;
    uint bottomRightY = bottomLeftY;

    // Calculate wrapped indices
    uint topRightIndex = (topRightY * width) + topRightX;
    uint bottomLeftIndex = (bottomLeftY * width) + bottomLeftX;
    uint bottomRightIndex = (bottomRightY * width) + bottomRightX;

    // Read pixels
    Pixel topLeftPixel = readOnlyPixels[topLeftIndex];
    Pixel bottomLeftPixel = readOnlyPixels[bottomLeftIndex];
    Pixel topRightPixel = readOnlyPixels[topRightIndex];
    Pixel bottomRightPixel = readOnlyPixels[bottomRightIndex];

    PixelData topLeftPixelData = simulationData.pixelLookup[topLeftPixel.PixelID16_Temperature8_Pressure8 & 0xFFFFu];
    PixelData bottomLeftPixelData = simulationData.pixelLookup[bottomLeftPixel.PixelID16_Temperature8_Pressure8 & 0xFFFFu];
    PixelData topRightPixelData = simulationData.pixelLookup[topRightPixel.PixelID16_Temperature8_Pressure8 & 0xFFFFu];
    PixelData bottomRightPixelData = simulationData.pixelLookup[bottomRightPixel.PixelID16_Temperature8_Pressure8 & 0xFFFFu];




/*
if (flowIteration == 0)
{
    uint topLeftCharge = getCharge(topLeftPixel.PixelID16_Temperature8_Pressure8);
    uint topRightCharge = getCharge(topRightPixel.PixelID16_Temperature8_Pressure8);
    uint bottomLeftCharge = getCharge(bottomLeftPixel.PixelID16_Temperature8_Pressure8);
    uint bottomRightCharge = getCharge(bottomRightPixel.PixelID16_Temperature8_Pressure8);

    uint topLeftDir = getDirection(topLeftPixel.PixelID16_Temperature8_Pressure8);
    uint topRightDir = getDirection(topRightPixel.PixelID16_Temperature8_Pressure8);
    uint bottomLeftDir = getDirection(bottomLeftPixel.PixelID16_Temperature8_Pressure8);
    uint bottomRightDir = getDirection(bottomRightPixel.PixelID16_Temperature8_Pressure8);

    //bool isEmitter = bitsetHas(.Flags)

    bool topLeftIsCond = bitsetHas(topLeftPixelData.Flags, Electricity);
    bool topRightIsCond = bitsetHas(topRightPixelData.Flags, Electricity);
    bool bottomLeftIsCond = bitsetHas(bottomLeftPixelData.Flags, Electricity);
    bool bottomRightIsCond = bitsetHas(bottomRightPixelData.Flags, Electricity);

    bool topLeftIsEmitter = bitsetHas(topLeftPixelData.Flags, ElectricityEmitter);
    bool topRightIsEmitter = bitsetHas(topRightPixelData.Flags, ElectricityEmitter);
    bool bottomLeftIsEmitter = bitsetHas(bottomLeftPixelData.Flags, ElectricityEmitter);
    bool bottomRightIsEmitter = bitsetHas(bottomRightPixelData.Flags, ElectricityEmitter);

    bool topRowSwapped = false;
    bool bottomRowSwapped = false;

    bool leftColumnSwapped = false;
    bool rightColumnSwapped = false;

    uint transmission = 5u;

    if (simulationData.timer % 2 == 0)
    {
        // Top Left
        if (!topRowSwapped && topLeftCharge > 0 && bitsetHas(topLeftDir, Right) && topRightCharge < MaxCharge && topRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topRightCharge + transmission) - MaxCharge)), 0u, topLeftCharge);
            if (!topLeftIsEmitter) { topLeftCharge -= maxTransmission; }
            topRightCharge += maxTransmission;
            topRowSwapped = true;
        }

        if (!leftColumnSwapped && topLeftCharge > 0 && bitsetHas(topLeftDir, Down) && bottomLeftCharge < MaxCharge && bottomLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomLeftCharge + transmission) - MaxCharge)), 0u, topLeftCharge);
            if (!topLeftIsEmitter) { topLeftCharge -= maxTransmission; }
            bottomLeftCharge += maxTransmission;
            leftColumnSwapped = true;
        }

        // Top Right
        if (!topRowSwapped && topRightCharge > 0 && bitsetHas(topRightDir, Left) && topLeftCharge < MaxCharge && topLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topLeftCharge + transmission) - MaxCharge)), 0u, topRightCharge);
            if (!topRightIsEmitter) { topRightCharge -= maxTransmission; }
            topLeftCharge += maxTransmission;
            topRowSwapped = true;
        }

        if (!rightColumnSwapped && topRightCharge > 0 && bitsetHas(topRightDir, Down) && bottomRightCharge < MaxCharge && bottomRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomRightCharge + transmission) - MaxCharge)), 0u, topRightCharge);
            if (!topRightIsEmitter) { topRightCharge -= maxTransmission; }
            bottomRightCharge += maxTransmission;
            rightColumnSwapped = true;
        }

        // Bottom Left
        if (!bottomRowSwapped && bottomLeftCharge > 0 && bitsetHas(bottomLeftDir, Right) && bottomRightCharge < MaxCharge && bottomRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomRightCharge + transmission) - MaxCharge)), 0u, bottomLeftCharge);
            if (!bottomLeftIsEmitter) { bottomLeftCharge -= maxTransmission; }
            bottomRightCharge += maxTransmission;
            bottomRowSwapped = true;
        }

        if (!leftColumnSwapped && bottomLeftCharge > 0 && bitsetHas(bottomLeftDir, Up) && topLeftCharge < MaxCharge && topLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topLeftCharge + transmission) - MaxCharge)), 0u, bottomLeftCharge);
            if (!bottomLeftIsEmitter) { bottomLeftCharge -= maxTransmission; }
            topLeftCharge += maxTransmission;
            leftColumnSwapped = true;
        }

        // Bottom Right
        if (!bottomRowSwapped && bottomRightCharge > 0 && bitsetHas(bottomRightDir, Left) && bottomLeftCharge < MaxCharge && bottomLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomLeftCharge + transmission) - MaxCharge)), 0u, bottomRightCharge);
            if (!bottomRightIsEmitter) { bottomRightCharge -= maxTransmission; }
            bottomLeftCharge += maxTransmission;
            bottomRowSwapped = true;
        }

        if (!rightColumnSwapped && bottomRightCharge > 0 && bitsetHas(bottomRightDir, Up) && topRightCharge < MaxCharge && topRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topRightCharge + transmission) - MaxCharge)), 0u, bottomRightCharge);
            if (!bottomRightIsEmitter) { bottomRightCharge -= maxTransmission; }
            topRightCharge += maxTransmission;
            rightColumnSwapped = true;
        }
    }
    else
    {
        // Bottom Right
        if (!bottomRowSwapped && bottomRightCharge > 0 && bitsetHas(bottomRightDir, Left) && bottomLeftCharge < MaxCharge && bottomLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomLeftCharge + transmission) - MaxCharge)), 0u, bottomRightCharge);
            if (!bottomRightIsEmitter) { bottomRightCharge -= maxTransmission; }
            bottomLeftCharge += maxTransmission;
            bottomRowSwapped = true;
        }

        if (!rightColumnSwapped && bottomRightCharge > 0 && bitsetHas(bottomRightDir, Up) && topRightCharge < MaxCharge && topRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topRightCharge + transmission) - MaxCharge)), 0u, bottomRightCharge);
            if (!bottomRightIsEmitter) { bottomRightCharge -= maxTransmission; }
            topRightCharge += maxTransmission;
            rightColumnSwapped = true;
        }

        // Bottom Left
        if (!bottomRowSwapped && bottomLeftCharge > 0 && bitsetHas(bottomLeftDir, Right) && bottomRightCharge < MaxCharge && bottomRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomRightCharge + transmission) - MaxCharge)), 0u, bottomLeftCharge);
            if (!bottomLeftIsEmitter) { bottomLeftCharge -= maxTransmission; }
            bottomRightCharge += maxTransmission;
            bottomRowSwapped = true;
        }

        if (!leftColumnSwapped && bottomLeftCharge > 0 && bitsetHas(bottomLeftDir, Up) && topLeftCharge < MaxCharge && topLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topLeftCharge + transmission) - MaxCharge)), 0u, bottomLeftCharge);
            if (!bottomLeftIsEmitter) { bottomLeftCharge -= maxTransmission; }
            topLeftCharge += maxTransmission;
            leftColumnSwapped = true;
        }

        // Top Right
        if (!topRowSwapped && topRightCharge > 0 && bitsetHas(topRightDir, Left) && topLeftCharge < MaxCharge && topLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topLeftCharge + transmission) - MaxCharge)), 0u, topRightCharge);
            if (!topRightIsEmitter) { topRightCharge -= maxTransmission; }
            topLeftCharge += maxTransmission;
            topRowSwapped = true;
        }

        if (!rightColumnSwapped && topRightCharge > 0 && bitsetHas(topRightDir, Down) && bottomRightCharge < MaxCharge && bottomRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomRightCharge + transmission) - MaxCharge)), 0u, topRightCharge);
            if (!topRightIsEmitter) { topRightCharge -= maxTransmission; }
            bottomRightCharge += maxTransmission;
            rightColumnSwapped = true;
        }

        // Top Left
        if (!topRowSwapped && topLeftCharge > 0 && bitsetHas(topLeftDir, Right) && topRightCharge < MaxCharge && topRightIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(topRightCharge + transmission) - MaxCharge)), 0u, topLeftCharge);
            if (!topLeftIsEmitter) { topLeftCharge -= maxTransmission; }
            topRightCharge += maxTransmission;
            topRowSwapped = true;
        }

        if (!leftColumnSwapped && topLeftCharge > 0 && bitsetHas(topLeftDir, Down) && bottomLeftCharge < MaxCharge && bottomLeftIsCond) {
            uint maxTransmission = clamp(transmission - uint(max(0, int(bottomLeftCharge + transmission) - MaxCharge)), 0u, topLeftCharge);
            if (!topLeftIsEmitter) { topLeftCharge -= maxTransmission; }
            bottomLeftCharge += maxTransmission;
            leftColumnSwapped = true;
        }
    }

    topLeftPixel.PixelID16_Temperature8_Pressure8       &= 0xFF00FFFFu;
    topRightPixel.PixelID16_Temperature8_Pressure8      &= 0xFF00FFFFu;
    bottomLeftPixel.PixelID16_Temperature8_Pressure8    &= 0xFF00FFFFu;
    bottomRightPixel.PixelID16_Temperature8_Pressure8   &= 0xFF00FFFFu;

    topLeftPixel.PixelID16_Temperature8_Pressure8       |= topLeftCharge << 16u;
    topRightPixel.PixelID16_Temperature8_Pressure8      |= topRightCharge << 16u;
    bottomLeftPixel.PixelID16_Temperature8_Pressure8    |= bottomLeftCharge << 16u;
    bottomRightPixel.PixelID16_Temperature8_Pressure8   |= bottomRightCharge << 16u;

}*/

    // Write pixels
    pixels[topLeftIndex] = topLeftPixel;
    pixels[bottomLeftIndex] = bottomLeftPixel;
    pixels[topRightIndex] = topRightPixel;
    pixels[bottomRightIndex] = bottomRightPixel;

    float topLeftTemperature = topLeftPixel.Temperature;
    float topRightTemperature = topRightPixel.Temperature;
    float bottomLeftTemperature = bottomLeftPixel.Temperature;
    float bottomRightTemperature = bottomRightPixel.Temperature;

    bool topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bool bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    bool topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bool bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftGravity = bitsetHas(topLeftPixelData.Flags, Gravity);
    bool topRightGravity = bitsetHas(topRightPixelData.Flags, Gravity);
    bool bottomLeftGravity = bitsetHas(bottomLeftPixelData.Flags, Gravity);
    bool bottomRightGravity = bitsetHas(bottomRightPixelData.Flags, Gravity);

    bool topLeftCanFlow = topLeftPixelData.Spread > 0;
    bool topRightCanFlow = topRightPixelData.Spread > 0;
    bool bottomLeftCanFlow = bottomLeftPixelData.Spread > 0;
    bool bottomRightCanFlow = bottomRightPixelData.Spread > 0;

    float step = 0.00002f;

    float topLeftDensity = topLeftPixelData.Density - (step * topLeftTemperature * float(topLeftCanFlow));
    float topRightDensity = topRightPixelData.Density - (step * topRightTemperature * float(topRightCanFlow));
    float bottomLeftDensity = bottomLeftPixelData.Density - (step * bottomLeftTemperature * float(bottomLeftCanFlow));
    float bottomRightDensity = bottomRightPixelData.Density - (step * bottomRightTemperature * float(bottomRightCanFlow));

    if (flowIteration == 0)
    {
        bool leftRowSwapped = false;
        bool rightRowSwapped = false;

        if (topLeftGravity && bottomLeftGravity && (topLeftCanFlow || !bottomLeftPixelSolid))
        {
            if (topLeftDensity > bottomLeftDensity)
            {
                pixels[topLeftIndex] = bottomLeftPixel;
                pixels[bottomLeftIndex] = topLeftPixel;

                Pixel tmpPixel = topLeftPixel;
                PixelData tmpPixelData = topLeftPixelData;
                float tmpPixelDensity = topLeftDensity;
                bool tmpGravity = topLeftGravity;

                topLeftPixel = bottomLeftPixel;
                topLeftPixelData = bottomLeftPixelData;
                topLeftDensity = bottomLeftDensity;
                topLeftGravity = bottomLeftGravity;

                bottomLeftPixel = tmpPixel;
                bottomLeftPixelData = tmpPixelData;
                bottomLeftDensity = tmpPixelDensity;
                bottomLeftGravity = tmpGravity;

                leftRowSwapped = true;
            }
        }

        if (topRightGravity && bottomRightGravity && (topRightCanFlow || !bottomRightPixelSolid))
        {
            if (topRightDensity > bottomRightDensity)
            {
                pixels[topRightIndex] = bottomRightPixel;
                pixels[bottomRightIndex] = topRightPixel;

                Pixel tmpPixel = topRightPixel;
                PixelData tmpPixelData = topRightPixelData;
                float tmpPixelDensity = topRightDensity;

                topRightPixel = bottomRightPixel;
                topRightPixelData = bottomRightPixelData;
                topRightDensity = bottomRightDensity;

                bottomRightPixel = tmpPixel;
                bottomRightPixelData = tmpPixelData;
                bottomRightDensity = tmpPixelDensity;

                rightRowSwapped = true;
            }
        }

        if ((topLeftPixelSolid && bottomRightPixelSolid) || (topRightPixelSolid && bottomLeftPixelSolid)) { return; }

        if (!leftRowSwapped && !rightRowSwapped)
        {
            if (topLeftGravity && bottomRightGravity && (topLeftCanFlow || !bottomRightPixelSolid) && topLeftDensity > bottomRightDensity)
            {
                pixels[topLeftIndex] = bottomRightPixel;
                pixels[bottomRightIndex] = topLeftPixel;

                Pixel tmpPixel = topLeftPixel;
                PixelData tmpPixelData = topLeftPixelData;
                float tmpPixelDensity = topLeftDensity;

                topLeftPixel = bottomRightPixel;
                topLeftPixelData = bottomRightPixelData;
                topLeftDensity = bottomRightDensity;

                bottomRightPixel = tmpPixel;
                bottomRightPixelData = tmpPixelData;
                bottomRightDensity = tmpPixelDensity;
            }
            else if (topRightGravity && bottomLeftGravity && (topRightCanFlow || !bottomLeftPixelSolid) &&  topRightDensity > bottomLeftDensity)
            {
                pixels[topRightIndex] = bottomLeftPixel;
                pixels[bottomLeftIndex] = topRightPixel;

                Pixel tmpPixel = topRightPixel;
                PixelData tmpPixelData = topRightPixelData;
                float tmpPixelDensity = topRightDensity;


                topRightPixel = bottomLeftPixel;
                topRightPixelData = bottomLeftPixelData;
                topRightDensity = bottomLeftDensity;

                bottomLeftPixel = tmpPixel;
                bottomLeftPixelData = tmpPixelData;
                bottomLeftDensity = tmpPixelDensity;
            }
        }
    }

    topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftCanSpread = topLeftPixelData.Spread > flowIteration;
    bool topRightCanSpread = topRightPixelData.Spread > flowIteration;
    bool bottomLeftCanSpread = bottomLeftPixelData.Spread > flowIteration;
    bool bottomRightCanSpread = bottomRightPixelData.Spread > flowIteration;

    if (!topLeftCanSpread && !topRightCanSpread && !bottomLeftCanSpread && !bottomRightCanSpread) { return; }

    //if (!topLeftPixelSolid && !topRightPixelSolid)
    //{
    if (
    (topLeftGravity && topRightGravity && (bottomLeftPixelSolid || bottomLeftDensity >= topLeftDensity) && (bottomRightPixelSolid || bottomRightDensity >= topRightDensity)) && (
    (simulationData.rng >= 0.5f && topLeftCanSpread && topLeftDensity > topRightDensity) ||
    (simulationData.rng < 0.5f && topRightCanSpread && topRightDensity > topLeftDensity)
    )
    )
    {
        pixels[topLeftIndex] = topRightPixel;
        pixels[topRightIndex] = topLeftPixel;

        bool tmpSolid = topLeftPixelSolid;
        float tmpDensity = topLeftDensity;

        topLeftPixelSolid = topRightPixelSolid;
        topLeftDensity = topRightDensity;

        topRightPixelSolid = tmpSolid;
        topRightDensity = tmpDensity;
    }
    //}

    //if (!bottomLeftPixelSolid && !bottomRightPixelSolid)
    //{
    if (
    (bottomLeftGravity && bottomRightGravity && (topLeftPixelSolid || topLeftDensity >= bottomLeftDensity) && (topRightPixelSolid || topRightDensity >= bottomRightDensity)) && (
    (simulationData.rng >= 0.5f && bottomLeftCanSpread && bottomLeftDensity > bottomRightDensity) ||
    (simulationData.rng < 0.5f && bottomRightCanSpread && bottomRightDensity > bottomLeftDensity)
    )
    )
    {
        pixels[bottomLeftIndex] = bottomRightPixel;
        pixels[bottomRightIndex] = bottomLeftPixel;
    }
    //}
}
