#version 450

#include "../PixelGridComputeGlobals.glsl"

// Pixel with {PixelID: 255, Flags: [Solid], Density: minValue, Spread: 0}
//const Pixel solidPixel = { 0x000001FF };
//const Pixel solidPixel = { 0xFF01F000 };

layout (push_constant) uniform PushConstant {
    uint readIndex;
    uint writeIndex;
    uint flowIteration;
    uvec2 margolusOffset;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    BoundaryCheck();

    uint cellStep = gl_GlobalInvocationID.x * 2;
    uint margolusX = ((cellStep + margolusOffset.x) % NUM_ELEMENTS_X);
    uint margolusY = (((cellStep / NUM_ELEMENTS_X) * 2) + 1) - margolusOffset.y;

    uint x = margolusX;
    uint y = margolusY;

    uint topRightX = (x + 1) % NUM_ELEMENTS_X;
    uint topRightY = y;

    uint bottomLeftX = x;
    uint bottomLeftY = (y == 0) ? NUM_ELEMENTS_Y - 1 : y - 1;

    uint bottomRightX = topRightX;
    uint bottomRightY = bottomLeftY;

    SetupPixelVarsByPosition(topLeft, x, y);
    SetupPixelVarsByPosition(topRight, topRightX, topRightY);
    SetupPixelVarsByPosition(bottomLeft, bottomLeftX, bottomLeftY);
    SetupPixelVarsByPosition(bottomRight, bottomRightX, bottomRightY);

    PixelData topLeftPixelData = simulationData.pixelLookup[topLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData bottomLeftPixelData = simulationData.pixelLookup[bottomLeftPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData topRightPixelData = simulationData.pixelLookup[topRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];
    PixelData bottomRightPixelData = simulationData.pixelLookup[bottomRightPixel.PixelID16_Charge8_Flags8 & 0xFFFFu];

    if (
    topLeftPixel.PixelID16_Charge8_Flags8 == bottomLeftPixel.PixelID16_Charge8_Flags8 &&
    bottomLeftPixel.PixelID16_Charge8_Flags8 == topRightPixel.PixelID16_Charge8_Flags8 &&
    topRightPixel.PixelID16_Charge8_Flags8 == bottomRightPixel.PixelID16_Charge8_Flags8 &&
    bottomRightPixel.PixelID16_Charge8_Flags8 == topLeftPixel.PixelID16_Charge8_Flags8
    ) { return; }

    float topLeftTemperature = topLeftPixel.Temperature;
    float topRightTemperature = topRightPixel.Temperature;
    float bottomLeftTemperature = bottomLeftPixel.Temperature;
    float bottomRightTemperature = bottomRightPixel.Temperature;

    bool atBottomEdge = y == 0;
    bool atRightEdge = x == NUM_ELEMENTS_X - 1;

    bool topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bool bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    bool topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bool bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftGravity = bitsetHas(topLeftPixelData.Flags, Gravity);
    bool topRightGravity = bitsetHas(topRightPixelData.Flags, Gravity);
    bool bottomLeftGravity = bitsetHas(bottomLeftPixelData.Flags, Gravity);
    bool bottomRightGravity = bitsetHas(bottomRightPixelData.Flags, Gravity);

    bool topLeftCanFlow = topLeftPixelData.Spread > 0;
    bool topRightCanFlow = topRightPixelData.Spread > 0;
    bool bottomLeftCanFlow = bottomLeftPixelData.Spread > 0;
    bool bottomRightCanFlow = bottomRightPixelData.Spread > 0;

    float step = 0.00002f;

    float topLeftDensity = topLeftPixelData.Density - (step * topLeftTemperature * float(topLeftCanFlow));
    float topRightDensity = topRightPixelData.Density - (step * topRightTemperature * float(topRightCanFlow));
    float bottomLeftDensity = bottomLeftPixelData.Density - (step * bottomLeftTemperature * float(bottomLeftCanFlow));
    float bottomRightDensity = bottomRightPixelData.Density - (step * bottomRightTemperature * float(bottomRightCanFlow));

    bool leftRowSwapped = false;
    bool rightRowSwapped = false;

    if (!atBottomEdge && topLeftGravity && bottomLeftGravity && (topLeftCanFlow || !bottomLeftPixelSolid))
    {
        if (topLeftDensity > bottomLeftDensity)
        {
            GetReadPixel(topLeft) = bottomLeftPixel;
            GetReadPixel(bottomLeft) = topLeftPixel;

            Pixel tmpPixel = topLeftPixel;
            PixelData tmpPixelData = topLeftPixelData;
            float tmpPixelDensity = topLeftDensity;
            bool tmpGravity = topLeftGravity;

            topLeftPixel = bottomLeftPixel;
            topLeftPixelData = bottomLeftPixelData;
            topLeftDensity = bottomLeftDensity;
            topLeftGravity = bottomLeftGravity;

            bottomLeftPixel = tmpPixel;
            bottomLeftPixelData = tmpPixelData;
            bottomLeftDensity = tmpPixelDensity;
            bottomLeftGravity = tmpGravity;

            leftRowSwapped = true;
        }
    }

    if (!atRightEdge && !atBottomEdge && topRightGravity && bottomRightGravity && (topRightCanFlow || !bottomRightPixelSolid))
    {
        if (topRightDensity > bottomRightDensity)
        {
            GetReadPixel(topRight) = bottomRightPixel;
            GetReadPixel(bottomRight) = topRightPixel;

            Pixel tmpPixel = topRightPixel;
            PixelData tmpPixelData = topRightPixelData;
            float tmpPixelDensity = topRightDensity;

            topRightPixel = bottomRightPixel;
            topRightPixelData = bottomRightPixelData;
            topRightDensity = bottomRightDensity;

            bottomRightPixel = tmpPixel;
            bottomRightPixelData = tmpPixelData;
            bottomRightDensity = tmpPixelDensity;

            rightRowSwapped = true;
        }
    }

    if ((topLeftPixelSolid && bottomRightPixelSolid) || (topRightPixelSolid && bottomLeftPixelSolid)) { return; }

    if (!leftRowSwapped && !rightRowSwapped && !atRightEdge && !atBottomEdge)
    {
        if (topLeftGravity && bottomRightGravity && (topLeftCanFlow || !bottomRightPixelSolid) && topLeftDensity > bottomRightDensity)
        {
            GetReadPixel(topLeft) = bottomRightPixel;
            GetReadPixel(bottomRight) = topLeftPixel;

            Pixel tmpPixel = topLeftPixel;
            PixelData tmpPixelData = topLeftPixelData;
            float tmpPixelDensity = topLeftDensity;

            topLeftPixel = bottomRightPixel;
            topLeftPixelData = bottomRightPixelData;
            topLeftDensity = bottomRightDensity;

            bottomRightPixel = tmpPixel;
            bottomRightPixelData = tmpPixelData;
            bottomRightDensity = tmpPixelDensity;
        }
        else if (topRightGravity && bottomLeftGravity && (topRightCanFlow || !bottomLeftPixelSolid) && topRightDensity > bottomLeftDensity)
        {
            GetReadPixel(topRight) = bottomLeftPixel;
            GetReadPixel(bottomLeft) = topRightPixel;

            Pixel tmpPixel = topRightPixel;
            PixelData tmpPixelData = topRightPixelData;
            float tmpPixelDensity = topRightDensity;


            topRightPixel = bottomLeftPixel;
            topRightPixelData = bottomLeftPixelData;
            topRightDensity = bottomLeftDensity;

            bottomLeftPixel = tmpPixel;
            bottomLeftPixelData = tmpPixelData;
            bottomLeftDensity = tmpPixelDensity;
        }
    }


    topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftCanSpread = topLeftPixelData.Spread > flowIteration;
    bool topRightCanSpread = topRightPixelData.Spread > flowIteration;
    bool bottomLeftCanSpread = bottomLeftPixelData.Spread > flowIteration;
    bool bottomRightCanSpread = bottomRightPixelData.Spread > flowIteration;

    if (!topLeftCanSpread && !topRightCanSpread && !bottomLeftCanSpread && !bottomRightCanSpread) { return; }

    //if (!topLeftPixelSolid && !topRightPixelSolid)
    //{
    if (
    !atRightEdge &&
    (topLeftGravity && topRightGravity && (bottomLeftPixelSolid || bottomLeftDensity >= topLeftDensity) && (bottomRightPixelSolid || bottomRightDensity >= topRightDensity)) && (
    (simulationData.rng >= 0.5f && topLeftCanSpread && topLeftDensity > topRightDensity) ||
    (simulationData.rng < 0.5f && topRightCanSpread && topRightDensity > topLeftDensity)
    )
    )
    {
        GetReadPixel(topLeft) = topRightPixel;
        GetReadPixel(topRight) = topLeftPixel;

        bool tmpSolid = topLeftPixelSolid;
        float tmpDensity = topLeftDensity;

        topLeftPixelSolid = topRightPixelSolid;
        topLeftDensity = topRightDensity;

        topRightPixelSolid = tmpSolid;
        topRightDensity = tmpDensity;
    }
    //}

    //if (!bottomLeftPixelSolid && !bottomRightPixelSolid)
    //{
    if (
    !atRightEdge && !atBottomEdge &&
    (bottomLeftGravity && bottomRightGravity && (topLeftPixelSolid || topLeftDensity >= bottomLeftDensity) && (topRightPixelSolid || topRightDensity >= bottomRightDensity)) && (
    (simulationData.rng >= 0.5f && bottomLeftCanSpread && bottomLeftDensity > bottomRightDensity) ||
    (simulationData.rng < 0.5f && bottomRightCanSpread && bottomRightDensity > bottomLeftDensity)
    )
    )
    {
        GetReadPixel(bottomLeft) = bottomRightPixel;
        GetReadPixel(bottomRight) = bottomLeftPixel;
    }
    //}
}
