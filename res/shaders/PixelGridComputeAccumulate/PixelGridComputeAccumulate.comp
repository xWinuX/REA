#version 450

#include "../PixelGridComputeGlobals.glsl"


layout(push_constant) uniform PushConstant {
    uint readIndex;
    uint writeIndex;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    uint width = simulationData.width;
    uint height = simulationData.height;

    if (gl_GlobalInvocationID.x >= width * height) {
        return;
    }

    uint x = gl_GlobalInvocationID.x % width;
    uint y = gl_GlobalInvocationID.x / width;

    uint topY = (y + 1) % height;
    uint bottomY = (y == 0) ? height - 1 : y - 1;

    uint rightX = (x + 1) % width;
    uint leftX = (x == 0) ? width - 1 : x - 1;

    // Calculate wrapped indices
    uint topYCalc = topY * width;
    uint middleYCalc = y * width;
    uint bottomYCalc = bottomY * width;

    uint topLeftIndex = topYCalc + leftX;
    uint topCenterIndex = topYCalc + x;
    uint topRightIndex = topYCalc + rightX;

    uint middleLeftIndex = middleYCalc + leftX;
    uint middleCenterIndex = gl_GlobalInvocationID.x;
    uint middleRightIndex = middleYCalc + rightX;

    uint bottomLeftIndex = bottomYCalc + leftX;
    uint bottomCenterIndex = bottomYCalc + x;
    uint bottomRightIndex = bottomYCalc + rightX;

    // Read pixels
    Pixel topLeftPixel = pixels[topLeftIndex + readIndex];
    Pixel topCenterPixel = pixels[topCenterIndex + readIndex];
    Pixel topRightPixel = pixels[topRightIndex + readIndex];

    Pixel middleLeftPixel = pixels[middleLeftIndex + readIndex];
    Pixel middleCenterPixel = pixels[middleCenterIndex + readIndex];
    Pixel middleRightPixel = pixels[middleRightIndex + readIndex];

    Pixel bottomLeftPixel = pixels[bottomLeftIndex + readIndex];
    Pixel bottomCenterPixel = pixels[bottomCenterIndex + readIndex];
    Pixel bottomRightPixel = pixels[bottomRightIndex + readIndex];

    uint pixelID = middleCenterPixel.PixelID16_Charge8_Flags8 & 0xFFFFu;

    PixelData middleCenterPixelData = simulationData.pixelLookup[pixelID];

    uint direction = getDirection(middleCenterPixel.PixelID16_Charge8_Flags8);
    uint charge = getCharge(middleCenterPixel.PixelID16_Charge8_Flags8);

    /* if (charge > 0 && bitsetHas(middleCenterPixelData.Flags, ElectricityReceiver))
     {
         charge--;
     }*/


    if (bitsetHas(middleCenterPixelData.Flags, Electricity))
    {
        int aroundCharge = 0;

        uint maxCharge0 = max(getCharge(middleRightPixel.PixelID16_Charge8_Flags8), getCharge(topCenterPixel.PixelID16_Charge8_Flags8));
        uint maxCharge1 = max(getCharge(middleLeftPixel.PixelID16_Charge8_Flags8), getCharge(bottomCenterPixel.PixelID16_Charge8_Flags8));

        uint maxCharge = max(maxCharge0, maxCharge1);

        if (!bitsetHas(middleCenterPixelData.Flags, ElectricityEmitter)) {
            charge = uint(clamp(int(maxCharge)-1, 0, 255));
        }
    }

    float temperatureResistance = middleCenterPixelData.TemperatureResistance;

    float baseTemperature = middleCenterPixel.Temperature;
    float temperature = baseTemperature;

    temperature += topLeftPixel.Temperature;
    temperature += topCenterPixel.Temperature;
    temperature += topRightPixel.Temperature;
    temperature += middleLeftPixel.Temperature;
    temperature += middleRightPixel.Temperature;
    temperature += bottomLeftPixel.Temperature;
    temperature += bottomCenterPixel.Temperature;
    temperature += bottomRightPixel.Temperature;

    temperature /= 9.0f;

    temperature = mix(baseTemperature, temperature, temperatureResistance);

    if (temperature >= middleCenterPixelData.HighTemperatureLimit) {
        pixelID = middleCenterPixelData.HighTemperatureLimitPixelID;
        PixelData newPixelData = simulationData.pixelLookup[pixelID];
        temperature = mix(temperature, newPixelData.BaseTemperature, newPixelData.TemperatureConversion);

        uint rigidBodyID = getRigidBodyID(middleCenterPixel.RigidBodyID12_RigidBodyIndex20);
        if (rigidBodyID != 0)
        {
            rigidBodies[rigidBodyID].NeedsRecalculation = true;
        }

    } else if (temperature < middleCenterPixelData.LowerTemperatureLimit) {
        pixelID =  middleCenterPixelData.LowerTemperatureLimitPixelID;
        PixelData newPixelData = simulationData.pixelLookup[pixelID];
        temperature = mix(temperature, newPixelData.BaseTemperature, newPixelData.TemperatureConversion);

        uint rigidBodyID = getRigidBodyID(middleCenterPixel.RigidBodyID12_RigidBodyIndex20);
        if (rigidBodyID != 0)
        {
            rigidBodies[rigidBodyID].NeedsRecalculation = true;
        }
    }

    // Clear Info
    middleCenterPixel.PixelID16_Charge8_Flags8 &= 0x0F000000u;

    // Assign new info
    middleCenterPixel.PixelID16_Charge8_Flags8 |= pixelID;
    middleCenterPixel.PixelID16_Charge8_Flags8 |= charge << 16u;
    middleCenterPixel.PixelID16_Charge8_Flags8 |= direction << 28u;
    middleCenterPixel.Temperature = temperature;

    // Write pixels to output and rendering buffer
    pixels[middleCenterIndex + writeIndex] = middleCenterPixel;
    readOnlyPixels[middleCenterIndex] = middleCenterPixel;
}
