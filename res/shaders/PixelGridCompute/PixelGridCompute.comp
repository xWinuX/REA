#version 450

#include "../PixelGridComputeGlobals.glsl"

// Pixel with {PixelID: 255, Flags: [Solid], Density: minValue, Spread: 0}
//const Pixel solidPixel = { 0x000001FF };
//const Pixel solidPixel = { 0xFF01F000 };

layout(push_constant) uniform PushConstant {
    uvec2 margolusOffset;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    #include "../PixelGridMorgulusStarter.glsl"

    uint topLeftPixelFlags = getPixelFlags(topLeftPixel.PixelID8_Flags8_Density8_Spread8);
    uint topLeftPixelDensity = getPixelDensity(topLeftPixel.PixelID8_Flags8_Density8_Spread8);

    uint bottomLeftPixelFlags = getPixelFlags(bottomLeftPixel.PixelID8_Flags8_Density8_Spread8);
    uint bottomLeftPixelDensity = getPixelDensity(bottomLeftPixel.PixelID8_Flags8_Density8_Spread8);

    bool leftRowSwapped = false;
    bool rightRowSwapped = false;

    bool topLeftPixelSolid = bitsetHas(topLeftPixelFlags, Solid);
    bool bottomLeftPixelSolid = bitsetHas(bottomLeftPixelFlags, Solid);

    if (bitsetHas(topLeftPixelFlags, Gravity) && !bitsetHas(bottomLeftPixelFlags, Solid))
    {
        if (topLeftPixelDensity > bottomLeftPixelDensity)
        {
            pixels[topLeftIndex] = bottomLeftPixel;
            pixels[bottomLeftIndex] = topLeftPixel;
            leftRowSwapped = true;
        }
    }

    // At the right edge
    pixels[topRightIndex] = topRightPixel;
    pixels[bottomRightIndex] = bottomRightPixel;

    uint topRightPixelFlags = getPixelFlags(topRightPixel.PixelID8_Flags8_Density8_Spread8);
    uint topRightPixelDensity = getPixelDensity(topRightPixel.PixelID8_Flags8_Density8_Spread8);

    uint bottomRightPixelFlags = getPixelFlags(bottomRightPixel.PixelID8_Flags8_Density8_Spread8);
    uint bottomRightPixelDensity = getPixelDensity(bottomRightPixel.PixelID8_Flags8_Density8_Spread8);

    bool topRightPixelSolid = bitsetHas(topRightPixelFlags, Solid);
    bool bottomRightPixelSolid = bitsetHas(bottomRightPixelFlags, Solid);

    if (bitsetHas(topRightPixelFlags, Gravity) && !bottomRightPixelSolid)
    {
        if (topRightPixelDensity > bottomRightPixelDensity)
        {
            pixels[topRightIndex] = bottomRightPixel;
            pixels[bottomRightIndex] = topRightPixel;
            rightRowSwapped = true;
        }
    }

    if (leftRowSwapped || rightRowSwapped) { return; }

    if ((topLeftPixelSolid && bottomRightPixelSolid) || (topRightPixelSolid && bottomLeftPixelSolid))
    {
        return;
    }

    if (bitsetHas(topLeftPixelFlags, Gravity) && !bottomRightPixelSolid && topLeftPixelDensity > bottomRightPixelDensity)
    {
        pixels[topLeftIndex] = bottomRightPixel;
        pixels[bottomRightIndex] = topLeftPixel;
        return;
    }

    if (bitsetHas(topRightPixelFlags, Gravity) && !bottomLeftPixelSolid &&  topRightPixelDensity > bottomLeftPixelDensity)
    {
        pixels[topRightIndex] = bottomLeftPixel;
        pixels[bottomLeftIndex] = topRightPixel;
        return;
    }

}
