#version 450

#include "../PixelGridComputeGlobals.glsl"


layout (push_constant) uniform PushConstant {
    uint readIndex;
    uint writeIndex;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    BoundaryCheck();

    uint x = gl_GlobalInvocationID.x % NUM_ELEMENTS_X;
    uint y = gl_GlobalInvocationID.x / NUM_ELEMENTS_X;

    uint topY = (y + 1) % NUM_ELEMENTS_Y;
    uint bottomY = (y == 0) ? NUM_ELEMENTS_Y - 1 : y - 1;

    uint rightX = (x + 1) % NUM_ELEMENTS_X;
    uint leftX = (x == 0) ? NUM_ELEMENTS_X - 1 : x - 1;

    uint topYCalc = topY * NUM_ELEMENTS_X;
    uint middleYCalc = y * NUM_ELEMENTS_X;
    uint bottomYCalc = bottomY * NUM_ELEMENTS_X;

    SetupPixelVarsByPosition(topLeft, leftX, topY);
    SetupPixelVarsByPosition(topCenter, x, topY);
    SetupPixelVarsByPosition(topRight, rightX, topY);

    SetupPixelVarsByPosition(middleLeft, leftX, y);
    SetupPixelVarsByPosition(middleCenter, x, y);
    SetupPixelVarsByPosition(middleRight, rightX, y);

    SetupPixelVarsByPosition(bottomLeft, leftX, bottomY);
    SetupPixelVarsByPosition(bottomCenter, x, bottomY);
    SetupPixelVarsByPosition(bottomRight, rightX, bottomY);

    uint pixelID = middleCenterPixel.PixelID16_Charge8_Flags8 & 0xFFFFu;

    PixelData middleCenterPixelData = simulationData.pixelLookup[pixelID];

    uint charge = getCharge(middleCenterPixel.PixelID16_Charge8_Flags8);
    uint flags = getFlags(middleCenterPixel.PixelID16_Charge8_Flags8);

/* if (charge > 0 && bitsetHas(middleCenterPixelData.Flags, ElectricityReceiver))
     {
         charge--;
     }*/


    if (bitsetHas(middleCenterPixelData.Flags, Electricity))
    {
        int aroundCharge = 0;

        uint maxCharge0 = max(getCharge(middleRightPixel.PixelID16_Charge8_Flags8), getCharge(topCenterPixel.PixelID16_Charge8_Flags8));
        uint maxCharge1 = max(getCharge(middleLeftPixel.PixelID16_Charge8_Flags8), getCharge(bottomCenterPixel.PixelID16_Charge8_Flags8));

        uint maxCharge = max(maxCharge0, maxCharge1);

        if (!bitsetHas(middleCenterPixelData.Flags, ElectricityEmitter)) {
            charge = uint(clamp(int(maxCharge) - 1, 0, 255));
        }
    }

    float temperatureResistance = middleCenterPixelData.TemperatureResistance;

    float baseTemperature = middleCenterPixel.Temperature;
    float temperature = baseTemperature;

    temperature += topLeftPixel.Temperature;
    temperature += topCenterPixel.Temperature;
    temperature += topRightPixel.Temperature;
    temperature += middleLeftPixel.Temperature;
    temperature += middleRightPixel.Temperature;
    temperature += bottomLeftPixel.Temperature;
    temperature += bottomCenterPixel.Temperature;
    temperature += bottomRightPixel.Temperature;

    temperature /= 9.0f;

    temperature = mix(baseTemperature, temperature, temperatureResistance);

    if (temperature >= middleCenterPixelData.HighTemperatureLimit) {
        pixelID = middleCenterPixelData.HighTemperatureLimitPixelID;
        PixelData newPixelData = simulationData.pixelLookup[pixelID];
        flags &= newPixelData.FlagsCarryover;
        temperature = mix(temperature, newPixelData.BaseTemperature, newPixelData.TemperatureConversion);

        uint rigidBodyID = getRigidBodyID(middleCenterPixel.RigidBodyID12_RigidBodyIndex20);
        if (rigidBodyID != 0)
        {
            rigidBodies[rigidBodyID].NeedsRecalculation = true;
        }

    } else if (temperature < middleCenterPixelData.LowerTemperatureLimit) {
        pixelID = middleCenterPixelData.LowerTemperatureLimitPixelID;
        PixelData newPixelData = simulationData.pixelLookup[pixelID];
        flags &= newPixelData.FlagsCarryover;
        temperature = mix(temperature, newPixelData.BaseTemperature, newPixelData.TemperatureConversion);

        uint rigidBodyID = getRigidBodyID(middleCenterPixel.RigidBodyID12_RigidBodyIndex20);
        if (rigidBodyID != 0)
        {
            rigidBodies[rigidBodyID].NeedsRecalculation = true;
        }
    }

    // Clear Info
    middleCenterPixel.PixelID16_Charge8_Flags8 &= 0x00000000u;

    // Assign new info
    middleCenterPixel.PixelID16_Charge8_Flags8 |= pixelID;
    middleCenterPixel.PixelID16_Charge8_Flags8 |= charge << 16u;
    middleCenterPixel.PixelID16_Charge8_Flags8 |= flags << 24u;
    middleCenterPixel.Temperature = temperature;

    // Write pixels to output and rendering buffer

    GetWritePixel(middleCenter) = middleCenterPixel;

    uvec2 position = GetPixelPosition(middleCenter);
    viewportPixels[PositionToIndex(position)] = middleCenterPixel;

    //copyPixels[middleCenterIndexWriteRead] = middleCenterPixel;
}
