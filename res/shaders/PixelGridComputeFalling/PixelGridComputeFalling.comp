#version 450

#include "../PixelGridComputeGlobals.glsl"

// Pixel with {PixelID: 255, Flags: [Solid], Density: minValue, Spread: 0}
//const Pixel solidPixel = { 0x000001FF };
//const Pixel solidPixel = { 0xFF01F000 };

layout(push_constant) uniform PushConstant {
    uint flowIteration;
    uvec2 margolusOffset;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    #include "../PixelGridMorgulusStarter.glsl"

    uint topLeftTemperature = getTemperature(topLeftPixel.PixelID16_Temperature8_Pressure8);
    uint topRightTemperature = getTemperature(topRightPixel.PixelID16_Temperature8_Pressure8);
    uint bottomLeftTemperature = getTemperature(bottomLeftPixel.PixelID16_Temperature8_Pressure8);
    uint bottomRightTemperature = getTemperature(bottomRightPixel.PixelID16_Temperature8_Pressure8);

    bool topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bool bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    bool topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bool bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftGravity = bitsetHas(topLeftPixelData.Flags, Gravity);
    bool topRightGravity = bitsetHas(topRightPixelData.Flags, Gravity);
    bool bottomLeftGravity = bitsetHas(bottomLeftPixelData.Flags, Gravity);
    bool bottomRightGravity = bitsetHas(bottomRightPixelData.Flags, Gravity);

    bool topLeftCanFlow = topLeftPixelData.Spread > 0;
    bool topRightCanFlow = topRightPixelData.Spread > 0;
    bool bottomLeftCanFlow = bottomLeftPixelData.Spread > 0;
    bool bottomRightCanFlow = bottomRightPixelData.Spread > 0;

    float step = 0.002f;

    float topLeftDensity = topLeftPixelData.Density - (step * topLeftTemperature * float(topLeftCanFlow));
    float topRightDensity = topRightPixelData.Density - (step * topRightTemperature * float(topRightCanFlow));
    float bottomLeftDensity = bottomLeftPixelData.Density - (step * bottomLeftTemperature * float(bottomLeftCanFlow));
    float bottomRightDensity = bottomRightPixelData.Density - (step * bottomRightTemperature * float(bottomRightCanFlow));

    if ((!topLeftGravity && !bottomRightGravity) || (!topRightGravity && !bottomLeftGravity)) { return; }

    if (flowIteration == 0)
    {
        bool leftRowSwapped = false;
        bool rightRowSwapped = false;

        if (topLeftGravity && bottomLeftGravity && (topLeftCanFlow || !bottomLeftPixelSolid))
        {
            if (topLeftDensity > bottomLeftDensity)
            {
                pixels[topLeftIndex] = bottomLeftPixel;
                pixels[bottomLeftIndex] = topLeftPixel;

                Pixel tmpPixel = topLeftPixel;
                PixelData tmpPixelData = topLeftPixelData;
                float tmpPixelDensity = topLeftDensity;

                topLeftPixel = bottomLeftPixel;
                topLeftPixelData = bottomLeftPixelData;
                topLeftDensity = bottomLeftDensity;

                bottomLeftPixel = tmpPixel;
                bottomLeftPixelData = tmpPixelData;
                bottomLeftDensity = tmpPixelDensity;

                leftRowSwapped = true;
            }
        }

        if (topRightGravity && bottomRightGravity && (topRightCanFlow || !bottomRightPixelSolid))
        {
            if (topRightDensity > bottomRightDensity)
            {
                pixels[topRightIndex] = bottomRightPixel;
                pixels[bottomRightIndex] = topRightPixel;

                Pixel tmpPixel = topRightPixel;
                PixelData tmpPixelData = topRightPixelData;
                float tmpPixelDensity = topRightDensity;

                topRightPixel = bottomRightPixel;
                topRightPixelData = bottomRightPixelData;
                topRightDensity = bottomRightDensity;

                bottomRightPixel = tmpPixel;
                bottomRightPixelData = tmpPixelData;
                bottomRightDensity = tmpPixelDensity;

                rightRowSwapped = true;
            }
        }

        if ((topLeftPixelSolid && bottomRightPixelSolid) || (topRightPixelSolid && bottomLeftPixelSolid)) { return; }

        if (!leftRowSwapped && !rightRowSwapped)
        {
            if (topLeftGravity && bottomRightGravity && (topLeftCanFlow || !bottomRightPixelSolid) && topLeftDensity > bottomRightDensity)
            {
                pixels[topLeftIndex] = bottomRightPixel;
                pixels[bottomRightIndex] = topLeftPixel;

                Pixel tmpPixel = topLeftPixel;
                PixelData tmpPixelData = topLeftPixelData;
                float tmpPixelDensity = topLeftDensity;

                topLeftPixel = bottomRightPixel;
                topLeftPixelData = bottomRightPixelData;
                topLeftDensity = bottomRightDensity;

                bottomRightPixel = tmpPixel;
                bottomRightPixelData = tmpPixelData;
                bottomRightDensity = tmpPixelDensity;
            }
            else if (topRightGravity && bottomLeftGravity && (topRightCanFlow || !bottomLeftPixelSolid) &&  topRightDensity > bottomLeftDensity)
            {
                pixels[topRightIndex] = bottomLeftPixel;
                pixels[bottomLeftIndex] = topRightPixel;

                Pixel tmpPixel = topRightPixel;
                PixelData tmpPixelData = topRightPixelData;
                float tmpPixelDensity = topRightDensity;


                topRightPixel = bottomLeftPixel;
                topRightPixelData = bottomLeftPixelData;
                topRightDensity = bottomLeftDensity;

                bottomLeftPixel = tmpPixel;
                bottomLeftPixelData = tmpPixelData;
                bottomLeftDensity = tmpPixelDensity;
            }
        }
    }

    topLeftPixelSolid = bitsetHas(topLeftPixelData.Flags, Solid);
    bottomLeftPixelSolid = bitsetHas(bottomLeftPixelData.Flags, Solid);
    topRightPixelSolid = bitsetHas(topRightPixelData.Flags, Solid);
    bottomRightPixelSolid = bitsetHas(bottomRightPixelData.Flags, Solid);

    bool topLeftCanSpread = topLeftPixelData.Spread > flowIteration;
    bool topRightCanSpread = topRightPixelData.Spread > flowIteration;
    bool bottomLeftCanSpread = topLeftPixelData.Spread > flowIteration;
    bool bottomRightCanSpread = topRightPixelData.Spread > flowIteration;

    if (!topLeftCanSpread && !topRightCanSpread && !bottomLeftCanSpread && !bottomRightCanSpread) { return; }

    //if (!topLeftPixelSolid && !topRightPixelSolid)
    //{
    if (
    (topLeftGravity && topRightGravity && (bottomLeftPixelSolid || bottomLeftDensity >= topLeftDensity) && (bottomRightPixelSolid || bottomRightDensity >= topRightDensity)) && (
    (simulationData.rng >= 0.5f && topLeftCanSpread && topLeftDensity > topRightDensity) ||
    (simulationData.rng < 0.5f && topRightCanSpread && topRightDensity > topLeftDensity)
    )
    )
    {
        pixels[topLeftIndex] = topRightPixel;
        pixels[topRightIndex] = topLeftPixel;
        return;
    }
    //}

    //if (!bottomLeftPixelSolid && !bottomRightPixelSolid)
    //{
    if (
    (bottomLeftGravity && bottomRightGravity && (topLeftPixelSolid || topLeftDensity >= bottomLeftDensity) && (topRightPixelSolid || topRightDensity >= bottomRightDensity)) && (
    (simulationData.rng >= 0.5f && bottomLeftCanSpread && bottomLeftDensity > bottomRightDensity) ||
    (simulationData.rng < 0.5f && bottomRightCanSpread && bottomRightDensity > bottomLeftDensity)
    )
    )
    {
        pixels[bottomLeftIndex] = bottomRightPixel;
        pixels[bottomRightIndex] = bottomLeftPixel;
        return;
    }
    //}
}
