#version 450

#include "../PixelGridComputeGlobals.glsl"

layout(push_constant) uniform PushConstant {
    uint readIndex;
    uint rigidBodyIndex;
};

layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    RigidBody rigidBody = simulationData.rigidBodies[rigidBodyIndex];
    uint width = rigidBody.Size.x;
    uint height = rigidBody.Size.y;

    if (gl_GlobalInvocationID.x >= width * height) {
        return;
    }

    Pixel pixel = rigidBodyData[rigidBody.DataIndex + gl_GlobalInvocationID.x];

    if (getRigidBodyID(pixel.RigidBodyID12_RigidBodyIndex20) == rigidBodyIndex)
    {
        vec2 center = vec2(rigidBody.Size/2.0f);
        ivec2 rigidBodyBottomLeftCorner = ivec2(round(rigidBody.Position - center));

        if (rigidBodyBottomLeftCorner.x < 0 || rigidBodyBottomLeftCorner.y < 0) {
            return;
        }

        float angle = radians(rigidBody.Rotation);
        mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));

        uint localX = (gl_GlobalInvocationID.x % width);
        uint localY = (gl_GlobalInvocationID.x / width);

        vec2 position = rotationMatrix * (vec2(localX, localY) - center);

        uint globalX = uint(rigidBodyBottomLeftCorner.x + round(center + position.x));
        uint globalY = uint(rigidBodyBottomLeftCorner.y + round(center + position.y));

        uint globalIndex = globalY * simulationData.width + globalX;

        // TODO: Check for overlap with other pixels
        pixels[globalIndex + readIndex] = pixel;
    }
}
